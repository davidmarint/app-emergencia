/* tslint:disable */
/* eslint-disable */
/**
 * Your Project API
 * Your project description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CustomTokenObtainPair } from '../models';
// @ts-ignore
import type { TokenOutput } from '../models';
// @ts-ignore
import type { TokenRefresh } from '../models';
// @ts-ignore
import type { User } from '../models';
// @ts-ignore
import type { UserCreate } from '../models';
/**
 * AuthenticateApi - axios parameter creator
 * @export
 */
export const AuthenticateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Iniciar Sesión
         * @param {CustomTokenObtainPair} customTokenObtainPair 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainUsersLoginCreate: async (customTokenObtainPair: CustomTokenObtainPair, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customTokenObtainPair' is not null or undefined
            assertParamExists('mainUsersLoginCreate', 'customTokenObtainPair', customTokenObtainPair)
            const localVarPath = `/api/main/users/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customTokenObtainPair, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} tokenRefresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainUsersRefreshCreate: async (tokenRefresh: TokenRefresh, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenRefresh' is not null or undefined
            assertParamExists('mainUsersRefreshCreate', 'tokenRefresh', tokenRefresh)
            const localVarPath = `/api/main/users/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenRefresh, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Registrar un nuevo Usuario
         * @summary Registrar un nuevo Usuario
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainUsersRegisterCreate: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('mainUsersRegisterCreate', 'userCreate', userCreate)
            const localVarPath = `/api/main/users/register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticateApi - functional programming interface
 * @export
 */
export const AuthenticateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticateApiAxiosParamCreator(configuration)
    return {
        /**
         * Iniciar Sesión
         * @param {CustomTokenObtainPair} customTokenObtainPair 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainUsersLoginCreate(customTokenObtainPair: CustomTokenObtainPair, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainUsersLoginCreate(customTokenObtainPair, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticateApi.mainUsersLoginCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefresh} tokenRefresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainUsersRefreshCreate(tokenRefresh: TokenRefresh, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefresh>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainUsersRefreshCreate(tokenRefresh, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticateApi.mainUsersRefreshCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Registrar un nuevo Usuario
         * @summary Registrar un nuevo Usuario
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainUsersRegisterCreate(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainUsersRegisterCreate(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticateApi.mainUsersRegisterCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticateApi - factory interface
 * @export
 */
export const AuthenticateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticateApiFp(configuration)
    return {
        /**
         * Iniciar Sesión
         * @param {AuthenticateApiMainUsersLoginCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainUsersLoginCreate(requestParameters: AuthenticateApiMainUsersLoginCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenOutput> {
            return localVarFp.mainUsersLoginCreate(requestParameters.customTokenObtainPair, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {AuthenticateApiMainUsersRefreshCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainUsersRefreshCreate(requestParameters: AuthenticateApiMainUsersRefreshCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenRefresh> {
            return localVarFp.mainUsersRefreshCreate(requestParameters.tokenRefresh, options).then((request) => request(axios, basePath));
        },
        /**
         * Registrar un nuevo Usuario
         * @summary Registrar un nuevo Usuario
         * @param {AuthenticateApiMainUsersRegisterCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainUsersRegisterCreate(requestParameters: AuthenticateApiMainUsersRegisterCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.mainUsersRegisterCreate(requestParameters.userCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for mainUsersLoginCreate operation in AuthenticateApi.
 * @export
 * @interface AuthenticateApiMainUsersLoginCreateRequest
 */
export interface AuthenticateApiMainUsersLoginCreateRequest {
    /**
     * 
     * @type {CustomTokenObtainPair}
     * @memberof AuthenticateApiMainUsersLoginCreate
     */
    readonly customTokenObtainPair: CustomTokenObtainPair
}

/**
 * Request parameters for mainUsersRefreshCreate operation in AuthenticateApi.
 * @export
 * @interface AuthenticateApiMainUsersRefreshCreateRequest
 */
export interface AuthenticateApiMainUsersRefreshCreateRequest {
    /**
     * 
     * @type {TokenRefresh}
     * @memberof AuthenticateApiMainUsersRefreshCreate
     */
    readonly tokenRefresh: TokenRefresh
}

/**
 * Request parameters for mainUsersRegisterCreate operation in AuthenticateApi.
 * @export
 * @interface AuthenticateApiMainUsersRegisterCreateRequest
 */
export interface AuthenticateApiMainUsersRegisterCreateRequest {
    /**
     * 
     * @type {UserCreate}
     * @memberof AuthenticateApiMainUsersRegisterCreate
     */
    readonly userCreate: UserCreate
}

/**
 * AuthenticateApi - object-oriented interface
 * @export
 * @class AuthenticateApi
 * @extends {BaseAPI}
 */
export class AuthenticateApi extends BaseAPI {
    /**
     * Iniciar Sesión
     * @param {AuthenticateApiMainUsersLoginCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticateApi
     */
    public mainUsersLoginCreate(requestParameters: AuthenticateApiMainUsersLoginCreateRequest, options?: RawAxiosRequestConfig) {
        return AuthenticateApiFp(this.configuration).mainUsersLoginCreate(requestParameters.customTokenObtainPair, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {AuthenticateApiMainUsersRefreshCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticateApi
     */
    public mainUsersRefreshCreate(requestParameters: AuthenticateApiMainUsersRefreshCreateRequest, options?: RawAxiosRequestConfig) {
        return AuthenticateApiFp(this.configuration).mainUsersRefreshCreate(requestParameters.tokenRefresh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Registrar un nuevo Usuario
     * @summary Registrar un nuevo Usuario
     * @param {AuthenticateApiMainUsersRegisterCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticateApi
     */
    public mainUsersRegisterCreate(requestParameters: AuthenticateApiMainUsersRegisterCreateRequest, options?: RawAxiosRequestConfig) {
        return AuthenticateApiFp(this.configuration).mainUsersRegisterCreate(requestParameters.userCreate, options).then((request) => request(this.axios, this.basePath));
    }
}

