/* tslint:disable */
/* eslint-disable */
/**
 * Your Project API
 * Your project description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EmergenciesType } from '../models';
// @ts-ignore
import type { Emergency } from '../models';
/**
 * EmergenciesApi - axios parameter creator
 * @export
 */
export const EmergenciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {File} [icon] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainEmergenciesEmergenciesTypeCreate: async (icon?: File, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/main/emergencies/emergencies-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (icon !== undefined) { 
                localVarFormParams.append('icon', icon as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainEmergenciesEmergenciesTypeList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/main/emergencies/emergencies-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Emergency} emergency 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainEmergenciesEmergencyCreate: async (emergency: Emergency, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emergency' is not null or undefined
            assertParamExists('mainEmergenciesEmergencyCreate', 'emergency', emergency)
            const localVarPath = `/api/main/emergencies/emergency`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emergency, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainEmergenciesEmergencyList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/main/emergencies/emergency`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmergenciesApi - functional programming interface
 * @export
 */
export const EmergenciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmergenciesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {File} [icon] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainEmergenciesEmergenciesTypeCreate(icon?: File, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmergenciesType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainEmergenciesEmergenciesTypeCreate(icon, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmergenciesApi.mainEmergenciesEmergenciesTypeCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainEmergenciesEmergenciesTypeList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmergenciesType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainEmergenciesEmergenciesTypeList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmergenciesApi.mainEmergenciesEmergenciesTypeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Emergency} emergency 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainEmergenciesEmergencyCreate(emergency: Emergency, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Emergency>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainEmergenciesEmergencyCreate(emergency, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmergenciesApi.mainEmergenciesEmergencyCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainEmergenciesEmergencyList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Emergency>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainEmergenciesEmergencyList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmergenciesApi.mainEmergenciesEmergencyList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EmergenciesApi - factory interface
 * @export
 */
export const EmergenciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmergenciesApiFp(configuration)
    return {
        /**
         * 
         * @param {EmergenciesApiMainEmergenciesEmergenciesTypeCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainEmergenciesEmergenciesTypeCreate(requestParameters: EmergenciesApiMainEmergenciesEmergenciesTypeCreateRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<EmergenciesType> {
            return localVarFp.mainEmergenciesEmergenciesTypeCreate(requestParameters.icon, requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainEmergenciesEmergenciesTypeList(options?: RawAxiosRequestConfig): AxiosPromise<Array<EmergenciesType>> {
            return localVarFp.mainEmergenciesEmergenciesTypeList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmergenciesApiMainEmergenciesEmergencyCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainEmergenciesEmergencyCreate(requestParameters: EmergenciesApiMainEmergenciesEmergencyCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Emergency> {
            return localVarFp.mainEmergenciesEmergencyCreate(requestParameters.emergency, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainEmergenciesEmergencyList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Emergency>> {
            return localVarFp.mainEmergenciesEmergencyList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for mainEmergenciesEmergenciesTypeCreate operation in EmergenciesApi.
 * @export
 * @interface EmergenciesApiMainEmergenciesEmergenciesTypeCreateRequest
 */
export interface EmergenciesApiMainEmergenciesEmergenciesTypeCreateRequest {
    /**
     * 
     * @type {File}
     * @memberof EmergenciesApiMainEmergenciesEmergenciesTypeCreate
     */
    readonly icon?: File

    /**
     * 
     * @type {string}
     * @memberof EmergenciesApiMainEmergenciesEmergenciesTypeCreate
     */
    readonly name?: string
}

/**
 * Request parameters for mainEmergenciesEmergencyCreate operation in EmergenciesApi.
 * @export
 * @interface EmergenciesApiMainEmergenciesEmergencyCreateRequest
 */
export interface EmergenciesApiMainEmergenciesEmergencyCreateRequest {
    /**
     * 
     * @type {Emergency}
     * @memberof EmergenciesApiMainEmergenciesEmergencyCreate
     */
    readonly emergency: Emergency
}

/**
 * EmergenciesApi - object-oriented interface
 * @export
 * @class EmergenciesApi
 * @extends {BaseAPI}
 */
export class EmergenciesApi extends BaseAPI {
    /**
     * 
     * @param {EmergenciesApiMainEmergenciesEmergenciesTypeCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmergenciesApi
     */
    public mainEmergenciesEmergenciesTypeCreate(requestParameters: EmergenciesApiMainEmergenciesEmergenciesTypeCreateRequest = {}, options?: RawAxiosRequestConfig) {
        return EmergenciesApiFp(this.configuration).mainEmergenciesEmergenciesTypeCreate(requestParameters.icon, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmergenciesApi
     */
    public mainEmergenciesEmergenciesTypeList(options?: RawAxiosRequestConfig) {
        return EmergenciesApiFp(this.configuration).mainEmergenciesEmergenciesTypeList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmergenciesApiMainEmergenciesEmergencyCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmergenciesApi
     */
    public mainEmergenciesEmergencyCreate(requestParameters: EmergenciesApiMainEmergenciesEmergencyCreateRequest, options?: RawAxiosRequestConfig) {
        return EmergenciesApiFp(this.configuration).mainEmergenciesEmergencyCreate(requestParameters.emergency, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmergenciesApi
     */
    public mainEmergenciesEmergencyList(options?: RawAxiosRequestConfig) {
        return EmergenciesApiFp(this.configuration).mainEmergenciesEmergencyList(options).then((request) => request(this.axios, this.basePath));
    }
}

