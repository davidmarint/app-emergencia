/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomTokenObtainPair from '../models/CustomTokenObtainPair';
import Logout from '../models/Logout';
import TokenOutput from '../models/TokenOutput';
import TokenRefresh from '../models/TokenRefresh';

/**
* Authenticate service.
* @module api/AuthenticateApi
* @version 1.0.0
*/
export default class AuthenticateApi {

    /**
    * Constructs a new AuthenticateApi. 
    * @alias module:api/AuthenticateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mainLoginCreate operation.
     * @callback module:api/AuthenticateApi~mainLoginCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/TokenOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Iniciar Sesión
     * @param {module:models/CustomTokenObtainPair} customTokenObtainPair 
     * @param {module:api/AuthenticateApi~mainLoginCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/TokenOutput}
     */
    mainLoginCreate(customTokenObtainPair, callback) {
      let postBody = customTokenObtainPair;
      // verify the required parameter 'customTokenObtainPair' is set
      if (customTokenObtainPair === undefined || customTokenObtainPair === null) {
        throw new Error("Missing the required parameter 'customTokenObtainPair' when calling mainLoginCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TokenOutput;
      return this.apiClient.callApi(
        '/api/main/login/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mainLogoutCreate operation.
     * @callback module:api/AuthenticateApi~mainLogoutCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cerrar sesión
     * @param {module:models/Logout} logout 
     * @param {module:api/AuthenticateApi~mainLogoutCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mainLogoutCreate(logout, callback) {
      let postBody = logout;
      // verify the required parameter 'logout' is set
      if (logout === undefined || logout === null) {
        throw new Error("Missing the required parameter 'logout' when calling mainLogoutCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/main/logout/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mainRefreshCreate operation.
     * @callback module:api/AuthenticateApi~mainRefreshCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/TokenRefresh} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {module:models/TokenRefresh} tokenRefresh 
     * @param {module:api/AuthenticateApi~mainRefreshCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/TokenRefresh}
     */
    mainRefreshCreate(tokenRefresh, callback) {
      let postBody = tokenRefresh;
      // verify the required parameter 'tokenRefresh' is set
      if (tokenRefresh === undefined || tokenRefresh === null) {
        throw new Error("Missing the required parameter 'tokenRefresh' when calling mainRefreshCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TokenRefresh;
      return this.apiClient.callApi(
        '/api/main/refresh/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
