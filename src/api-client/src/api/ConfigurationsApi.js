/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Configuration from '../models/Configuration';

/**
* Configurations service.
* @module api/ConfigurationsApi
* @version 1.0.0
*/
export default class ConfigurationsApi {

    /**
    * Constructs a new ConfigurationsApi. 
    * @alias module:api/ConfigurationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mainConfigurationsList operation.
     * @callback module:api/ConfigurationsApi~mainConfigurationsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:models/Configuration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ConfigurationsApi~mainConfigurationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:models/Configuration>}
     */
    mainConfigurationsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Configuration];
      return this.apiClient.callApi(
        '/api/main/configurations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mainConfigurationsRetrieve operation.
     * @callback module:api/ConfigurationsApi~mainConfigurationsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/Configuration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this Configuraci√≥n.
     * @param {module:api/ConfigurationsApi~mainConfigurationsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/Configuration}
     */
    mainConfigurationsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mainConfigurationsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Configuration;
      return this.apiClient.callApi(
        '/api/main/configurations/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
