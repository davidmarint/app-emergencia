/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LineMapList from '../models/LineMapList';
import PointMapList from '../models/PointMapList';
import ZoneMapList from '../models/ZoneMapList';

/**
* SearchMaps service.
* @module api/SearchMapsApi
* @version 1.0.0
*/
export default class SearchMapsApi {

    /**
    * Constructs a new SearchMapsApi. 
    * @alias module:api/SearchMapsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapsSearchLinesList operation.
     * @callback module:api/SearchMapsApi~mapsSearchLinesListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/LineMapList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * text
     * @param {Number} companyId company_id
     * @param {Object} opts Optional parameters
     * @param {Number} [latitude] latitude
     * @param {Number} [longitude] longitude
     * @param {Number} [radius] radius
     * @param {String} [tag] tag
     * @param {module:api/SearchMapsApi~mapsSearchLinesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/LineMapList}
     */
    mapsSearchLinesList(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling mapsSearchLinesList");
      }

      let pathParams = {
      };
      let queryParams = {
        'company_id': companyId,
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LineMapList;
      return this.apiClient.callApi(
        '/api/maps/search/lines/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsSearchPointsList operation.
     * @callback module:api/SearchMapsApi~mapsSearchPointsListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/PointMapList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * text
     * @param {Number} companyId company_id
     * @param {Object} opts Optional parameters
     * @param {Number} [latitude] latitude
     * @param {Number} [longitude] longitude
     * @param {Number} [radius] radius
     * @param {String} [tag] tag
     * @param {module:api/SearchMapsApi~mapsSearchPointsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/PointMapList}
     */
    mapsSearchPointsList(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling mapsSearchPointsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'company_id': companyId,
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PointMapList;
      return this.apiClient.callApi(
        '/api/maps/search/points/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsSearchZonesList operation.
     * @callback module:api/SearchMapsApi~mapsSearchZonesListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ZoneMapList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * text
     * @param {Number} companyId company_id
     * @param {Object} opts Optional parameters
     * @param {Number} [latitude] latitude
     * @param {Number} [longitude] longitude
     * @param {Number} [radius] radius
     * @param {String} [tag] tag
     * @param {module:api/SearchMapsApi~mapsSearchZonesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ZoneMapList}
     */
    mapsSearchZonesList(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling mapsSearchZonesList");
      }

      let pathParams = {
      };
      let queryParams = {
        'company_id': companyId,
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ZoneMapList;
      return this.apiClient.callApi(
        '/api/maps/search/zones/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
