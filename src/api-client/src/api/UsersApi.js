/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Register from '../models/Register';
import UserModel from '../models/UserModel';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mainCurrentRetrieve operation.
     * @callback module:api/UsersApi~mainCurrentRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/UserModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtiene el Usuario Actual utilizando el token en el HEADER
     * Obtiene el Usuario Actual utilizando el token en el HEADER
     * @param {module:api/UsersApi~mainCurrentRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/UserModel}
     */
    mainCurrentRetrieve(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserModel;
      return this.apiClient.callApi(
        '/api/main/current/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mainRegisterCreate operation.
     * @callback module:api/UsersApi~mainRegisterCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/UserModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registrar un nuevo Usuario
     * Registrar un nuevo Usuario
     * @param {module:models/Register} register 
     * @param {module:api/UsersApi~mainRegisterCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/UserModel}
     */
    mainRegisterCreate(register, callback) {
      let postBody = register;
      // verify the required parameter 'register' is set
      if (register === undefined || register === null) {
        throw new Error("Missing the required parameter 'register' when calling mainRegisterCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserModel;
      return this.apiClient.callApi(
        '/api/main/register/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mainUserCreate operation.
     * @callback module:api/UsersApi~mainUserCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:models/UserModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualiza los datos del usuario, solo el usuario puede actualizar sus datos
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {String} [firstName] 
     * @param {String} [lastName] 
     * @param {File} [avatar] 
     * @param {module:api/UsersApi~mainUserCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/UserModel}
     */
    mainUserCreate(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling mainUserCreate");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'avatar': opts['avatar']
      };

      let authNames = ['jwtAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserModel;
      return this.apiClient.callApi(
        '/api/main/user/{username}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mainUserDestroy operation.
     * @callback module:api/UsersApi~mainUserDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Elimina un usuario, solo el usuario se puede eliminar a si mismo
     * Elimina un usuario, solo el usuario se puede eliminar a si mismo
     * @param {String} username 
     * @param {module:api/UsersApi~mainUserDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mainUserDestroy(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling mainUserDestroy");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/main/user/{username}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mainUserRetrieve operation.
     * @callback module:api/UsersApi~mainUserRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/UserModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtiene la información de un usuario mediante el nombre usuario
     * Obtiene la información de un usuario mediante el nombre usuario
     * @param {String} username 
     * @param {module:api/UsersApi~mainUserRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/UserModel}
     */
    mainUserRetrieve(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling mainUserRetrieve");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserModel;
      return this.apiClient.callApi(
        '/api/main/user/{username}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
