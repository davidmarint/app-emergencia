/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ZoneMap from '../models/ZoneMap';
import ZoneMapList from '../models/ZoneMapList';

/**
* ZoneMaps service.
* @module api/ZoneMapsApi
* @version 1.0.0
*/
export default class ZoneMapsApi {

    /**
    * Constructs a new ZoneMapsApi. 
    * @alias module:api/ZoneMapsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapsInsideRetrieve operation.
     * @callback module:api/ZoneMapsApi~mapsInsideRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revisa si una latitud y longitud se encuentra de una zona
     * @param {Number} id 
     * @param {Number} latitude 
     * @param {Number} longitude 
     * @param {module:api/ZoneMapsApi~mapsInsideRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    mapsInsideRetrieve(id, latitude, longitude, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mapsInsideRetrieve");
      }
      // verify the required parameter 'latitude' is set
      if (latitude === undefined || latitude === null) {
        throw new Error("Missing the required parameter 'latitude' when calling mapsInsideRetrieve");
      }
      // verify the required parameter 'longitude' is set
      if (longitude === undefined || longitude === null) {
        throw new Error("Missing the required parameter 'longitude' when calling mapsInsideRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'latitude': latitude,
        'longitude': longitude
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/maps/inside/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsZonesList operation.
     * @callback module:api/ZoneMapsApi~mapsZonesListCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ZoneMapList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * text
     * @param {Object} opts Optional parameters
     * @param {Number} [companyId] Filter zones by company id
     * @param {module:api/ZoneMapsApi~mapsZonesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ZoneMapList}
     */
    mapsZonesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'company_id': opts['companyId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ZoneMapList;
      return this.apiClient.callApi(
        '/api/maps/zones/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsZonesRetrieve operation.
     * @callback module:api/ZoneMapsApi~mapsZonesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:models/ZoneMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this zone map.
     * @param {module:api/ZoneMapsApi~mapsZonesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:models/ZoneMap}
     */
    mapsZonesRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mapsZonesRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ZoneMap;
      return this.apiClient.callApi(
        '/api/maps/zones/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
