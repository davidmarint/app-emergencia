/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmergencyTypes from './EmergencyTypes';
import Incident from './Incident';
import OrganizedCategories from './OrganizedCategories';

/**
 * The Company model module.
 * @module models/Company
 * @version 1.0.0
 */
class Company {
    /**
     * Constructs a new <code>Company</code>.
     * @alias module:models/Company
     * @param name {String} 
     * @param fullName {String} 
     * @param nit {String} 
     * @param tag {String} 
     * @param menus {Array.<Number>} 
     * @param emergenciesAllowed {Array.<module:models/EmergencyTypes>} 
     * @param incidentTypes {Array.<module:models/Incident>} 
     */
    constructor(name, fullName, nit, tag, menus, emergenciesAllowed, incidentTypes) { 
        
        Company.initialize(this, name, fullName, nit, tag, menus, emergenciesAllowed, incidentTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, fullName, nit, tag, menus, emergenciesAllowed, incidentTypes) { 
        obj['name'] = name;
        obj['full_name'] = fullName;
        obj['nit'] = nit;
        obj['tag'] = tag;
        obj['menus'] = menus;
        obj['emergencies_allowed'] = emergenciesAllowed;
        obj['incident_types'] = incidentTypes;
    }

    /**
     * Constructs a <code>Company</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/Company} obj Optional instance to populate.
     * @return {module:models/Company} The populated <code>Company</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Company();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('nit')) {
                obj['nit'] = ApiClient.convertToType(data['nit'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('menus')) {
                obj['menus'] = ApiClient.convertToType(data['menus'], ['Number']);
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'Number');
            }
            if (data.hasOwnProperty('logo_url')) {
                obj['logo_url'] = ApiClient.convertToType(data['logo_url'], 'String');
            }
            if (data.hasOwnProperty('background_url')) {
                obj['background_url'] = ApiClient.convertToType(data['background_url'], 'String');
            }
            if (data.hasOwnProperty('wiki_icon_url')) {
                obj['wiki_icon_url'] = ApiClient.convertToType(data['wiki_icon_url'], 'String');
            }
            if (data.hasOwnProperty('wiki_title')) {
                obj['wiki_title'] = ApiClient.convertToType(data['wiki_title'], 'String');
            }
            if (data.hasOwnProperty('emergencies_allowed')) {
                obj['emergencies_allowed'] = ApiClient.convertToType(data['emergencies_allowed'], [EmergencyTypes]);
            }
            if (data.hasOwnProperty('extra_zones')) {
                obj['extra_zones'] = ApiClient.convertToType(data['extra_zones'], ['Number']);
            }
            if (data.hasOwnProperty('extra_points')) {
                obj['extra_points'] = ApiClient.convertToType(data['extra_points'], ['Number']);
            }
            if (data.hasOwnProperty('extra_lines')) {
                obj['extra_lines'] = ApiClient.convertToType(data['extra_lines'], ['Number']);
            }
            if (data.hasOwnProperty('required_emergency_control_point')) {
                obj['required_emergency_control_point'] = ApiClient.convertToType(data['required_emergency_control_point'], 'Boolean');
            }
            if (data.hasOwnProperty('extra_emergency_categories')) {
                obj['extra_emergency_categories'] = ApiClient.convertToType(data['extra_emergency_categories'], 'String');
            }
            if (data.hasOwnProperty('incident_types')) {
                obj['incident_types'] = ApiClient.convertToType(data['incident_types'], [Incident]);
            }
            if (data.hasOwnProperty('organized_categories')) {
                obj['organized_categories'] = ApiClient.convertToType(data['organized_categories'], [OrganizedCategories]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Company</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Company</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Company.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['full_name'] && !(typeof data['full_name'] === 'string' || data['full_name'] instanceof String)) {
            throw new Error("Expected the field `full_name` to be a primitive type in the JSON string but got " + data['full_name']);
        }
        // ensure the json data is a string
        if (data['nit'] && !(typeof data['nit'] === 'string' || data['nit'] instanceof String)) {
            throw new Error("Expected the field `nit` to be a primitive type in the JSON string but got " + data['nit']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['menus'])) {
            throw new Error("Expected the field `menus` to be an array in the JSON data but got " + data['menus']);
        }
        // ensure the json data is a string
        if (data['logo_url'] && !(typeof data['logo_url'] === 'string' || data['logo_url'] instanceof String)) {
            throw new Error("Expected the field `logo_url` to be a primitive type in the JSON string but got " + data['logo_url']);
        }
        // ensure the json data is a string
        if (data['background_url'] && !(typeof data['background_url'] === 'string' || data['background_url'] instanceof String)) {
            throw new Error("Expected the field `background_url` to be a primitive type in the JSON string but got " + data['background_url']);
        }
        // ensure the json data is a string
        if (data['wiki_icon_url'] && !(typeof data['wiki_icon_url'] === 'string' || data['wiki_icon_url'] instanceof String)) {
            throw new Error("Expected the field `wiki_icon_url` to be a primitive type in the JSON string but got " + data['wiki_icon_url']);
        }
        // ensure the json data is a string
        if (data['wiki_title'] && !(typeof data['wiki_title'] === 'string' || data['wiki_title'] instanceof String)) {
            throw new Error("Expected the field `wiki_title` to be a primitive type in the JSON string but got " + data['wiki_title']);
        }
        if (data['emergencies_allowed']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['emergencies_allowed'])) {
                throw new Error("Expected the field `emergencies_allowed` to be an array in the JSON data but got " + data['emergencies_allowed']);
            }
            // validate the optional field `emergencies_allowed` (array)
            for (const item of data['emergencies_allowed']) {
                EmergencyTypes.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['extra_zones'])) {
            throw new Error("Expected the field `extra_zones` to be an array in the JSON data but got " + data['extra_zones']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['extra_points'])) {
            throw new Error("Expected the field `extra_points` to be an array in the JSON data but got " + data['extra_points']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['extra_lines'])) {
            throw new Error("Expected the field `extra_lines` to be an array in the JSON data but got " + data['extra_lines']);
        }
        // ensure the json data is a string
        if (data['extra_emergency_categories'] && !(typeof data['extra_emergency_categories'] === 'string' || data['extra_emergency_categories'] instanceof String)) {
            throw new Error("Expected the field `extra_emergency_categories` to be a primitive type in the JSON string but got " + data['extra_emergency_categories']);
        }
        if (data['incident_types']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['incident_types'])) {
                throw new Error("Expected the field `incident_types` to be an array in the JSON data but got " + data['incident_types']);
            }
            // validate the optional field `incident_types` (array)
            for (const item of data['incident_types']) {
                Incident.validateJSON(item);
            };
        }
        if (data['organized_categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['organized_categories'])) {
                throw new Error("Expected the field `organized_categories` to be an array in the JSON data but got " + data['organized_categories']);
            }
            // validate the optional field `organized_categories` (array)
            for (const item of data['organized_categories']) {
                OrganizedCategories.validateJSON(item);
            };
        }

        return true;
    }


}

Company.RequiredProperties = ["name", "full_name", "nit", "tag", "menus", "emergencies_allowed", "incident_types"];

/**
 * @member {Number} id
 */
Company.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Company.prototype['name'] = undefined;

/**
 * @member {String} full_name
 */
Company.prototype['full_name'] = undefined;

/**
 * @member {String} nit
 */
Company.prototype['nit'] = undefined;

/**
 * @member {String} tag
 */
Company.prototype['tag'] = undefined;

/**
 * @member {String} website
 */
Company.prototype['website'] = undefined;

/**
 * @member {String} street
 */
Company.prototype['street'] = undefined;

/**
 * @member {String} city
 */
Company.prototype['city'] = undefined;

/**
 * @member {String} email
 */
Company.prototype['email'] = undefined;

/**
 * @member {String} phone
 */
Company.prototype['phone'] = undefined;

/**
 * @member {Boolean} active
 */
Company.prototype['active'] = undefined;

/**
 * @member {Array.<Number>} menus
 */
Company.prototype['menus'] = undefined;

/**
 * @member {Number} zone
 */
Company.prototype['zone'] = undefined;

/**
 * @member {String} logo_url
 */
Company.prototype['logo_url'] = undefined;

/**
 * @member {String} background_url
 */
Company.prototype['background_url'] = undefined;

/**
 * @member {String} wiki_icon_url
 */
Company.prototype['wiki_icon_url'] = undefined;

/**
 * @member {String} wiki_title
 */
Company.prototype['wiki_title'] = undefined;

/**
 * @member {Array.<module:models/EmergencyTypes>} emergencies_allowed
 */
Company.prototype['emergencies_allowed'] = undefined;

/**
 * @member {Array.<Number>} extra_zones
 */
Company.prototype['extra_zones'] = undefined;

/**
 * @member {Array.<Number>} extra_points
 */
Company.prototype['extra_points'] = undefined;

/**
 * @member {Array.<Number>} extra_lines
 */
Company.prototype['extra_lines'] = undefined;

/**
 * @member {Boolean} required_emergency_control_point
 */
Company.prototype['required_emergency_control_point'] = undefined;

/**
 * @member {String} extra_emergency_categories
 */
Company.prototype['extra_emergency_categories'] = undefined;

/**
 * @member {Array.<module:models/Incident>} incident_types
 */
Company.prototype['incident_types'] = undefined;

/**
 * @member {Array.<module:models/OrganizedCategories>} organized_categories
 */
Company.prototype['organized_categories'] = undefined;






export default Company;

