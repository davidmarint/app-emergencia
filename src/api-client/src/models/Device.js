/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Device model module.
 * @module models/Device
 * @version 1.0.0
 */
class Device {
    /**
     * Constructs a new <code>Device</code>.
     * @alias module:models/Device
     * @param deviceToken {String} 
     * @param deviceType {String} 
     */
    constructor(deviceToken, deviceType) { 
        
        Device.initialize(this, deviceToken, deviceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceToken, deviceType) { 
        obj['device_token'] = deviceToken;
        obj['device_type'] = deviceType;
    }

    /**
     * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/Device} obj Optional instance to populate.
     * @return {module:models/Device} The populated <code>Device</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Device();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('device_token')) {
                obj['device_token'] = ApiClient.convertToType(data['device_token'], 'String');
            }
            if (data.hasOwnProperty('device_type')) {
                obj['device_type'] = ApiClient.convertToType(data['device_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Device</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Device</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Device.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['device_token'] && !(typeof data['device_token'] === 'string' || data['device_token'] instanceof String)) {
            throw new Error("Expected the field `device_token` to be a primitive type in the JSON string but got " + data['device_token']);
        }
        // ensure the json data is a string
        if (data['device_type'] && !(typeof data['device_type'] === 'string' || data['device_type'] instanceof String)) {
            throw new Error("Expected the field `device_type` to be a primitive type in the JSON string but got " + data['device_type']);
        }

        return true;
    }


}

Device.RequiredProperties = ["device_token", "device_type"];

/**
 * @member {Number} id
 */
Device.prototype['id'] = undefined;

/**
 * @member {String} device_token
 */
Device.prototype['device_token'] = undefined;

/**
 * @member {String} device_type
 */
Device.prototype['device_type'] = undefined;






export default Device;

