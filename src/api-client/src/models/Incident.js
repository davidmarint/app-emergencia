/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmergencyTypes from './EmergencyTypes';

/**
 * The Incident model module.
 * @module models/Incident
 * @version 1.0.0
 */
class Incident {
    /**
     * Constructs a new <code>Incident</code>.
     * @alias module:models/Incident
     * @param company {Number} 
     * @param title {String} 
     * @param order {Number} 
     * @param emergencyTypes {Array.<module:models/EmergencyTypes>} 
     */
    constructor(company, title, order, emergencyTypes) { 
        
        Incident.initialize(this, company, title, order, emergencyTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, company, title, order, emergencyTypes) { 
        obj['company'] = company;
        obj['title'] = title;
        obj['order'] = order;
        obj['emergency_types'] = emergencyTypes;
    }

    /**
     * Constructs a <code>Incident</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/Incident} obj Optional instance to populate.
     * @return {module:models/Incident} The populated <code>Incident</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Incident();

            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('emergency_types')) {
                obj['emergency_types'] = ApiClient.convertToType(data['emergency_types'], [EmergencyTypes]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Incident</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Incident</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Incident.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        if (data['emergency_types']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['emergency_types'])) {
                throw new Error("Expected the field `emergency_types` to be an array in the JSON data but got " + data['emergency_types']);
            }
            // validate the optional field `emergency_types` (array)
            for (const item of data['emergency_types']) {
                EmergencyTypes.validateJSON(item);
            };
        }

        return true;
    }


}

Incident.RequiredProperties = ["company", "title", "order", "emergency_types"];

/**
 * @member {Number} company
 */
Incident.prototype['company'] = undefined;

/**
 * @member {String} title
 */
Incident.prototype['title'] = undefined;

/**
 * @member {String} image
 */
Incident.prototype['image'] = undefined;

/**
 * @member {String} description
 */
Incident.prototype['description'] = undefined;

/**
 * @member {Number} order
 */
Incident.prototype['order'] = undefined;

/**
 * @member {String} link
 */
Incident.prototype['link'] = undefined;

/**
 * @member {Array.<module:models/EmergencyTypes>} emergency_types
 */
Incident.prototype['emergency_types'] = undefined;






export default Incident;

