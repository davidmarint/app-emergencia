/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MenuItem from './MenuItem';
import Nested from './Nested';

/**
 * The Menu model module.
 * @module models/Menu
 * @version 1.0.0
 */
class Menu {
    /**
     * Constructs a new <code>Menu</code>.
     * @alias module:models/Menu
     * @param name {String} 
     */
    constructor(name) { 
        
        Menu.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Menu</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/Menu} obj Optional instance to populate.
     * @return {module:models/Menu} The populated <code>Menu</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Menu();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], Nested);
            }
            if (data.hasOwnProperty('menu_items')) {
                obj['menu_items'] = ApiClient.convertToType(data['menu_items'], [MenuItem]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Menu</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Menu</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Menu.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `company`
        if (data['company']) { // data not null
          Nested.validateJSON(data['company']);
        }
        if (data['menu_items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['menu_items'])) {
                throw new Error("Expected the field `menu_items` to be an array in the JSON data but got " + data['menu_items']);
            }
            // validate the optional field `menu_items` (array)
            for (const item of data['menu_items']) {
                MenuItem.validateJSON(item);
            };
        }

        return true;
    }


}

Menu.RequiredProperties = ["name"];

/**
 * @member {Number} id
 */
Menu.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Menu.prototype['name'] = undefined;

/**
 * @member {module:models/Nested} company
 */
Menu.prototype['company'] = undefined;

/**
 * @member {Array.<module:models/MenuItem>} menu_items
 */
Menu.prototype['menu_items'] = undefined;






export default Menu;

