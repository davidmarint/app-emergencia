/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MenuItemNested from './MenuItemNested';

/**
 * The MenuItem model module.
 * @module models/MenuItem
 * @version 1.0.0
 */
class MenuItem {
    /**
     * Constructs a new <code>MenuItem</code>.
     * @alias module:models/MenuItem
     * @param title {String} 
     */
    constructor(title) { 
        
        MenuItem.initialize(this, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title) { 
        obj['title'] = title;
    }

    /**
     * Constructs a <code>MenuItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/MenuItem} obj Optional instance to populate.
     * @return {module:models/MenuItem} The populated <code>MenuItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MenuItem();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('page_url')) {
                obj['page_url'] = ApiClient.convertToType(data['page_url'], 'String');
            }
            if (data.hasOwnProperty('video')) {
                obj['video'] = ApiClient.convertToType(data['video'], 'String');
            }
            if (data.hasOwnProperty('menu')) {
                obj['menu'] = ApiClient.convertToType(data['menu'], 'String');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'String');
            }
            if (data.hasOwnProperty('tree_id')) {
                obj['tree_id'] = ApiClient.convertToType(data['tree_id'], 'Number');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'Number');
            }
            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [MenuItemNested]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MenuItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MenuItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MenuItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['page'] && !(typeof data['page'] === 'string' || data['page'] instanceof String)) {
            throw new Error("Expected the field `page` to be a primitive type in the JSON string but got " + data['page']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['page_url'] && !(typeof data['page_url'] === 'string' || data['page_url'] instanceof String)) {
            throw new Error("Expected the field `page_url` to be a primitive type in the JSON string but got " + data['page_url']);
        }
        // ensure the json data is a string
        if (data['video'] && !(typeof data['video'] === 'string' || data['video'] instanceof String)) {
            throw new Error("Expected the field `video` to be a primitive type in the JSON string but got " + data['video']);
        }
        // ensure the json data is a string
        if (data['menu'] && !(typeof data['menu'] === 'string' || data['menu'] instanceof String)) {
            throw new Error("Expected the field `menu` to be a primitive type in the JSON string but got " + data['menu']);
        }
        // ensure the json data is a string
        if (data['parent_id'] && !(typeof data['parent_id'] === 'string' || data['parent_id'] instanceof String)) {
            throw new Error("Expected the field `parent_id` to be a primitive type in the JSON string but got " + data['parent_id']);
        }
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                MenuItemNested.validateJSON(item);
            };
        }

        return true;
    }


}

MenuItem.RequiredProperties = ["title"];

/**
 * @member {Number} id
 */
MenuItem.prototype['id'] = undefined;

/**
 * @member {String} title
 */
MenuItem.prototype['title'] = undefined;

/**
 * @member {String} page
 */
MenuItem.prototype['page'] = undefined;

/**
 * Descripci√≥n
 * @member {String} description
 */
MenuItem.prototype['description'] = undefined;

/**
 * @member {String} page_url
 */
MenuItem.prototype['page_url'] = undefined;

/**
 * @member {String} video
 */
MenuItem.prototype['video'] = undefined;

/**
 * @member {String} menu
 */
MenuItem.prototype['menu'] = undefined;

/**
 * @member {String} parent_id
 */
MenuItem.prototype['parent_id'] = undefined;

/**
 * @member {Number} tree_id
 */
MenuItem.prototype['tree_id'] = undefined;

/**
 * @member {Number} level
 */
MenuItem.prototype['level'] = undefined;

/**
 * @member {Array.<module:models/MenuItemNested>} children
 */
MenuItem.prototype['children'] = undefined;






export default MenuItem;

