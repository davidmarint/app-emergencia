/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FormTypeEnum from './FormTypeEnum';

/**
 * The Nested model module.
 * @module models/Nested
 * @version 1.0.0
 */
class Nested {
    /**
     * Constructs a new <code>Nested</code>.
     * @alias module:models/Nested
     * @param name {String} 
     * @param fullName {String} 
     * @param slug {String} 
     * @param nit {String} 
     * @param tag {String} 
     */
    constructor(name, fullName, slug, nit, tag) { 
        
        Nested.initialize(this, name, fullName, slug, nit, tag);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, fullName, slug, nit, tag) { 
        obj['name'] = name;
        obj['full_name'] = fullName;
        obj['slug'] = slug;
        obj['nit'] = nit;
        obj['tag'] = tag;
    }

    /**
     * Constructs a <code>Nested</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/Nested} obj Optional instance to populate.
     * @return {module:models/Nested} The populated <code>Nested</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Nested();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('project_name')) {
                obj['project_name'] = ApiClient.convertToType(data['project_name'], 'String');
            }
            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('nit')) {
                obj['nit'] = ApiClient.convertToType(data['nit'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
            if (data.hasOwnProperty('public_background')) {
                obj['public_background'] = ApiClient.convertToType(data['public_background'], 'String');
            }
            if (data.hasOwnProperty('sidebar_background')) {
                obj['sidebar_background'] = ApiClient.convertToType(data['sidebar_background'], 'String');
            }
            if (data.hasOwnProperty('background')) {
                obj['background'] = ApiClient.convertToType(data['background'], 'String');
            }
            if (data.hasOwnProperty('wiki_icon')) {
                obj['wiki_icon'] = ApiClient.convertToType(data['wiki_icon'], 'String');
            }
            if (data.hasOwnProperty('wiki_title')) {
                obj['wiki_title'] = ApiClient.convertToType(data['wiki_title'], 'String');
            }
            if (data.hasOwnProperty('form_type')) {
                obj['form_type'] = FormTypeEnum.constructFromObject(data['form_type']);
            }
            if (data.hasOwnProperty('public_title_form')) {
                obj['public_title_form'] = ApiClient.convertToType(data['public_title_form'], 'String');
            }
            if (data.hasOwnProperty('event_name')) {
                obj['event_name'] = ApiClient.convertToType(data['event_name'], 'String');
            }
            if (data.hasOwnProperty('category_label')) {
                obj['category_label'] = ApiClient.convertToType(data['category_label'], 'String');
            }
            if (data.hasOwnProperty('required_emergency_control_point')) {
                obj['required_emergency_control_point'] = ApiClient.convertToType(data['required_emergency_control_point'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_create_emergencies_by_web')) {
                obj['allow_create_emergencies_by_web'] = ApiClient.convertToType(data['allow_create_emergencies_by_web'], 'Boolean');
            }
            if (data.hasOwnProperty('extra_emergency_categories')) {
                obj['extra_emergency_categories'] = ApiClient.convertToType(data['extra_emergency_categories'], 'String');
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'Number');
            }
            if (data.hasOwnProperty('emergencies_allowed')) {
                obj['emergencies_allowed'] = ApiClient.convertToType(data['emergencies_allowed'], ['Number']);
            }
            if (data.hasOwnProperty('extra_zones')) {
                obj['extra_zones'] = ApiClient.convertToType(data['extra_zones'], ['Number']);
            }
            if (data.hasOwnProperty('extra_points')) {
                obj['extra_points'] = ApiClient.convertToType(data['extra_points'], ['Number']);
            }
            if (data.hasOwnProperty('extra_lines')) {
                obj['extra_lines'] = ApiClient.convertToType(data['extra_lines'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Nested</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Nested</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Nested.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['project_name'] && !(typeof data['project_name'] === 'string' || data['project_name'] instanceof String)) {
            throw new Error("Expected the field `project_name` to be a primitive type in the JSON string but got " + data['project_name']);
        }
        // ensure the json data is a string
        if (data['alias'] && !(typeof data['alias'] === 'string' || data['alias'] instanceof String)) {
            throw new Error("Expected the field `alias` to be a primitive type in the JSON string but got " + data['alias']);
        }
        // ensure the json data is a string
        if (data['full_name'] && !(typeof data['full_name'] === 'string' || data['full_name'] instanceof String)) {
            throw new Error("Expected the field `full_name` to be a primitive type in the JSON string but got " + data['full_name']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['nit'] && !(typeof data['nit'] === 'string' || data['nit'] instanceof String)) {
            throw new Error("Expected the field `nit` to be a primitive type in the JSON string but got " + data['nit']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['logo'] && !(typeof data['logo'] === 'string' || data['logo'] instanceof String)) {
            throw new Error("Expected the field `logo` to be a primitive type in the JSON string but got " + data['logo']);
        }
        // ensure the json data is a string
        if (data['public_background'] && !(typeof data['public_background'] === 'string' || data['public_background'] instanceof String)) {
            throw new Error("Expected the field `public_background` to be a primitive type in the JSON string but got " + data['public_background']);
        }
        // ensure the json data is a string
        if (data['sidebar_background'] && !(typeof data['sidebar_background'] === 'string' || data['sidebar_background'] instanceof String)) {
            throw new Error("Expected the field `sidebar_background` to be a primitive type in the JSON string but got " + data['sidebar_background']);
        }
        // ensure the json data is a string
        if (data['background'] && !(typeof data['background'] === 'string' || data['background'] instanceof String)) {
            throw new Error("Expected the field `background` to be a primitive type in the JSON string but got " + data['background']);
        }
        // ensure the json data is a string
        if (data['wiki_icon'] && !(typeof data['wiki_icon'] === 'string' || data['wiki_icon'] instanceof String)) {
            throw new Error("Expected the field `wiki_icon` to be a primitive type in the JSON string but got " + data['wiki_icon']);
        }
        // ensure the json data is a string
        if (data['wiki_title'] && !(typeof data['wiki_title'] === 'string' || data['wiki_title'] instanceof String)) {
            throw new Error("Expected the field `wiki_title` to be a primitive type in the JSON string but got " + data['wiki_title']);
        }
        // ensure the json data is a string
        if (data['public_title_form'] && !(typeof data['public_title_form'] === 'string' || data['public_title_form'] instanceof String)) {
            throw new Error("Expected the field `public_title_form` to be a primitive type in the JSON string but got " + data['public_title_form']);
        }
        // ensure the json data is a string
        if (data['event_name'] && !(typeof data['event_name'] === 'string' || data['event_name'] instanceof String)) {
            throw new Error("Expected the field `event_name` to be a primitive type in the JSON string but got " + data['event_name']);
        }
        // ensure the json data is a string
        if (data['category_label'] && !(typeof data['category_label'] === 'string' || data['category_label'] instanceof String)) {
            throw new Error("Expected the field `category_label` to be a primitive type in the JSON string but got " + data['category_label']);
        }
        // ensure the json data is a string
        if (data['extra_emergency_categories'] && !(typeof data['extra_emergency_categories'] === 'string' || data['extra_emergency_categories'] instanceof String)) {
            throw new Error("Expected the field `extra_emergency_categories` to be a primitive type in the JSON string but got " + data['extra_emergency_categories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['emergencies_allowed'])) {
            throw new Error("Expected the field `emergencies_allowed` to be an array in the JSON data but got " + data['emergencies_allowed']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['extra_zones'])) {
            throw new Error("Expected the field `extra_zones` to be an array in the JSON data but got " + data['extra_zones']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['extra_points'])) {
            throw new Error("Expected the field `extra_points` to be an array in the JSON data but got " + data['extra_points']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['extra_lines'])) {
            throw new Error("Expected the field `extra_lines` to be an array in the JSON data but got " + data['extra_lines']);
        }

        return true;
    }


}

Nested.RequiredProperties = ["name", "full_name", "slug", "nit", "tag"];

/**
 * @member {Number} id
 */
Nested.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Nested.prototype['name'] = undefined;

/**
 * @member {String} project_name
 */
Nested.prototype['project_name'] = undefined;

/**
 * @member {String} alias
 */
Nested.prototype['alias'] = undefined;

/**
 * @member {String} full_name
 */
Nested.prototype['full_name'] = undefined;

/**
 * @member {String} slug
 */
Nested.prototype['slug'] = undefined;

/**
 * @member {String} nit
 */
Nested.prototype['nit'] = undefined;

/**
 * @member {String} tag
 */
Nested.prototype['tag'] = undefined;

/**
 * @member {String} website
 */
Nested.prototype['website'] = undefined;

/**
 * @member {String} street
 */
Nested.prototype['street'] = undefined;

/**
 * @member {String} city
 */
Nested.prototype['city'] = undefined;

/**
 * @member {String} email
 */
Nested.prototype['email'] = undefined;

/**
 * @member {String} phone
 */
Nested.prototype['phone'] = undefined;

/**
 * @member {Boolean} active
 */
Nested.prototype['active'] = undefined;

/**
 * @member {String} logo
 */
Nested.prototype['logo'] = undefined;

/**
 * @member {String} public_background
 */
Nested.prototype['public_background'] = undefined;

/**
 * @member {String} sidebar_background
 */
Nested.prototype['sidebar_background'] = undefined;

/**
 * @member {String} background
 */
Nested.prototype['background'] = undefined;

/**
 * @member {String} wiki_icon
 */
Nested.prototype['wiki_icon'] = undefined;

/**
 * @member {String} wiki_title
 */
Nested.prototype['wiki_title'] = undefined;

/**
 * @member {module:models/FormTypeEnum} form_type
 */
Nested.prototype['form_type'] = undefined;

/**
 * @member {String} public_title_form
 */
Nested.prototype['public_title_form'] = undefined;

/**
 * Nombre con que se denominan los eventos dentro de esta compañía,                     ejemplo: Incidentes, alertas..., por defecto son Emergencias
 * @member {String} event_name
 */
Nested.prototype['event_name'] = undefined;

/**
 * Texto que se mostrará en el input de la categoría
 * @member {String} category_label
 */
Nested.prototype['category_label'] = undefined;

/**
 * @member {Boolean} required_emergency_control_point
 */
Nested.prototype['required_emergency_control_point'] = undefined;

/**
 * @member {Boolean} allow_create_emergencies_by_web
 */
Nested.prototype['allow_create_emergencies_by_web'] = undefined;

/**
 * @member {String} extra_emergency_categories
 */
Nested.prototype['extra_emergency_categories'] = undefined;

/**
 * @member {Number} zone
 */
Nested.prototype['zone'] = undefined;

/**
 * @member {Array.<Number>} emergencies_allowed
 */
Nested.prototype['emergencies_allowed'] = undefined;

/**
 * @member {Array.<Number>} extra_zones
 */
Nested.prototype['extra_zones'] = undefined;

/**
 * @member {Array.<Number>} extra_points
 */
Nested.prototype['extra_points'] = undefined;

/**
 * @member {Array.<Number>} extra_lines
 */
Nested.prototype['extra_lines'] = undefined;






export default Nested;

