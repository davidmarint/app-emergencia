/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrganizedCategories model module.
 * @module models/OrganizedCategories
 * @version 1.0.0
 */
class OrganizedCategories {
    /**
     * Constructs a new <code>OrganizedCategories</code>.
     * @alias module:models/OrganizedCategories
     * @param group {String} 
     * @param options {Array.<Object>} 
     */
    constructor(group, options) { 
        
        OrganizedCategories.initialize(this, group, options);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, group, options) { 
        obj['group'] = group;
        obj['options'] = options;
    }

    /**
     * Constructs a <code>OrganizedCategories</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/OrganizedCategories} obj Optional instance to populate.
     * @return {module:models/OrganizedCategories} The populated <code>OrganizedCategories</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrganizedCategories();

            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrganizedCategories</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrganizedCategories</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrganizedCategories.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['options'])) {
            throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
        }

        return true;
    }


}

OrganizedCategories.RequiredProperties = ["group", "options"];

/**
 * @member {String} group
 */
OrganizedCategories.prototype['group'] = undefined;

/**
 * @member {Array.<Object>} options
 */
OrganizedCategories.prototype['options'] = undefined;






export default OrganizedCategories;

