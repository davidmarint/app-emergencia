/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Page model module.
 * @module models/Page
 * @version 1.0.0
 */
class Page {
    /**
     * Constructs a new <code>Page</code>.
     * @alias module:models/Page
     * @param title {String} Título
     */
    constructor(title) { 
        
        Page.initialize(this, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title) { 
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Page</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/Page} obj Optional instance to populate.
     * @return {module:models/Page} The populated <code>Page</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Page();

            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('subtitle')) {
                obj['subtitle'] = ApiClient.convertToType(data['subtitle'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('more_information')) {
                obj['more_information'] = ApiClient.convertToType(data['more_information'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], 'String');
            }
            if (data.hasOwnProperty('contacts')) {
                obj['contacts'] = ApiClient.convertToType(data['contacts'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('video')) {
                obj['video'] = ApiClient.convertToType(data['video'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], 'String');
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Page</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Page</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Page.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['subtitle'] && !(typeof data['subtitle'] === 'string' || data['subtitle'] instanceof String)) {
            throw new Error("Expected the field `subtitle` to be a primitive type in the JSON string but got " + data['subtitle']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['more_information'] && !(typeof data['more_information'] === 'string' || data['more_information'] instanceof String)) {
            throw new Error("Expected the field `more_information` to be a primitive type in the JSON string but got " + data['more_information']);
        }
        // ensure the json data is a string
        if (data['links'] && !(typeof data['links'] === 'string' || data['links'] instanceof String)) {
            throw new Error("Expected the field `links` to be a primitive type in the JSON string but got " + data['links']);
        }
        // ensure the json data is a string
        if (data['contacts'] && !(typeof data['contacts'] === 'string' || data['contacts'] instanceof String)) {
            throw new Error("Expected the field `contacts` to be a primitive type in the JSON string but got " + data['contacts']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['video'] && !(typeof data['video'] === 'string' || data['video'] instanceof String)) {
            throw new Error("Expected the field `video` to be a primitive type in the JSON string but got " + data['video']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['keywords'] && !(typeof data['keywords'] === 'string' || data['keywords'] instanceof String)) {
            throw new Error("Expected the field `keywords` to be a primitive type in the JSON string but got " + data['keywords']);
        }

        return true;
    }


}

Page.RequiredProperties = ["title"];

/**
 * Título
 * @member {String} title
 */
Page.prototype['title'] = undefined;

/**
 * Subtítulo
 * @member {String} subtitle
 */
Page.prototype['subtitle'] = undefined;

/**
 * @member {String} content
 */
Page.prototype['content'] = undefined;

/**
 * @member {String} more_information
 */
Page.prototype['more_information'] = undefined;

/**
 * @member {String} links
 */
Page.prototype['links'] = undefined;

/**
 * @member {String} contacts
 */
Page.prototype['contacts'] = undefined;

/**
 * Descripción
 * @member {String} description
 */
Page.prototype['description'] = undefined;

/**
 * @member {String} video
 */
Page.prototype['video'] = undefined;

/**
 * @member {String} image
 */
Page.prototype['image'] = undefined;

/**
 * Lista separada por comas, usado internamente para hacer búsquedas
 * @member {String} keywords
 */
Page.prototype['keywords'] = undefined;

/**
 * @member {Boolean} published
 */
Page.prototype['published'] = undefined;






export default Page;

