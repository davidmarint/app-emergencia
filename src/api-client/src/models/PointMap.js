/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GisFeatureEnum from './GisFeatureEnum';
import PointMapGeometry from './PointMapGeometry';
import PointMapProperties from './PointMapProperties';

/**
 * The PointMap model module.
 * @module models/PointMap
 * @version 1.0.0
 */
class PointMap {
    /**
     * Constructs a new <code>PointMap</code>.
     * A class to serialize locations as GeoJSON compatible data
     * @alias module:models/PointMap
     */
    constructor() { 
        
        PointMap.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PointMap</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/PointMap} obj Optional instance to populate.
     * @return {module:models/PointMap} The populated <code>PointMap</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PointMap();

            if (data.hasOwnProperty('type')) {
                obj['type'] = GisFeatureEnum.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('geometry')) {
                obj['geometry'] = PointMapGeometry.constructFromObject(data['geometry']);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = PointMapProperties.constructFromObject(data['properties']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PointMap</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PointMap</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `geometry`
        if (data['geometry']) { // data not null
          PointMapGeometry.validateJSON(data['geometry']);
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          PointMapProperties.validateJSON(data['properties']);
        }

        return true;
    }


}



/**
 * @member {module:models/GisFeatureEnum} type
 */
PointMap.prototype['type'] = undefined;

/**
 * @member {String} id
 */
PointMap.prototype['id'] = undefined;

/**
 * @member {module:models/PointMapGeometry} geometry
 */
PointMap.prototype['geometry'] = undefined;

/**
 * @member {module:models/PointMapProperties} properties
 */
PointMap.prototype['properties'] = undefined;






export default PointMap;

