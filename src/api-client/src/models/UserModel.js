/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Company from './Company';
import Group from './Group';

/**
 * The UserModel model module.
 * @module models/UserModel
 * @version 1.0.0
 */
class UserModel {
    /**
     * Constructs a new <code>UserModel</code>.
     * @alias module:models/UserModel
     * @param username {String} Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @param email {String} 
     * @param groups {Array.<module:models/Group>} 
     * @param companies {Array.<module:models/Company>} 
     */
    constructor(username, email, groups, companies) { 
        
        UserModel.initialize(this, username, email, groups, companies);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, username, email, groups, companies) { 
        obj['username'] = username;
        obj['email'] = email;
        obj['groups'] = groups;
        obj['companies'] = companies;
    }

    /**
     * Constructs a <code>UserModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/UserModel} obj Optional instance to populate.
     * @return {module:models/UserModel} The populated <code>UserModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserModel();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('avatar')) {
                obj['avatar'] = ApiClient.convertToType(data['avatar'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [Group]);
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], 'String');
            }
            if (data.hasOwnProperty('companies')) {
                obj['companies'] = ApiClient.convertToType(data['companies'], [Company]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['avatar'] && !(typeof data['avatar'] === 'string' || data['avatar'] instanceof String)) {
            throw new Error("Expected the field `avatar` to be a primitive type in the JSON string but got " + data['avatar']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        if (data['groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groups'])) {
                throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
            }
            // validate the optional field `groups` (array)
            for (const item of data['groups']) {
                Group.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['roles'] && !(typeof data['roles'] === 'string' || data['roles'] instanceof String)) {
            throw new Error("Expected the field `roles` to be a primitive type in the JSON string but got " + data['roles']);
        }
        if (data['companies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['companies'])) {
                throw new Error("Expected the field `companies` to be an array in the JSON data but got " + data['companies']);
            }
            // validate the optional field `companies` (array)
            for (const item of data['companies']) {
                Company.validateJSON(item);
            };
        }

        return true;
    }


}

UserModel.RequiredProperties = ["username", "email", "groups", "companies"];

/**
 * @member {Number} id
 */
UserModel.prototype['id'] = undefined;

/**
 * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
 * @member {String} username
 */
UserModel.prototype['username'] = undefined;

/**
 * @member {String} avatar
 */
UserModel.prototype['avatar'] = undefined;

/**
 * @member {String} first_name
 */
UserModel.prototype['first_name'] = undefined;

/**
 * @member {String} last_name
 */
UserModel.prototype['last_name'] = undefined;

/**
 * @member {String} email
 */
UserModel.prototype['email'] = undefined;

/**
 * @member {Array.<module:models/Group>} groups
 */
UserModel.prototype['groups'] = undefined;

/**
 * @member {String} roles
 */
UserModel.prototype['roles'] = undefined;

/**
 * @member {Array.<module:models/Company>} companies
 */
UserModel.prototype['companies'] = undefined;






export default UserModel;

