/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AsiApi);
  }
}(this, function(expect, AsiApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AsiApi.EmergenciesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EmergenciesApi', function() {
    describe('emergenciesCreate', function() {
      it('should call emergenciesCreate successfully', function(done) {
        //uncomment below and update the code to test emergenciesCreate
        //instance.emergenciesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('emergenciesDestroy', function() {
      it('should call emergenciesDestroy successfully', function(done) {
        //uncomment below and update the code to test emergenciesDestroy
        //instance.emergenciesDestroy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('emergenciesImagesCreate', function() {
      it('should call emergenciesImagesCreate successfully', function(done) {
        //uncomment below and update the code to test emergenciesImagesCreate
        //instance.emergenciesImagesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('emergenciesImagesDestroy', function() {
      it('should call emergenciesImagesDestroy successfully', function(done) {
        //uncomment below and update the code to test emergenciesImagesDestroy
        //instance.emergenciesImagesDestroy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('emergenciesLastRetrieve', function() {
      it('should call emergenciesLastRetrieve successfully', function(done) {
        //uncomment below and update the code to test emergenciesLastRetrieve
        //instance.emergenciesLastRetrieve(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('emergenciesList', function() {
      it('should call emergenciesList successfully', function(done) {
        //uncomment below and update the code to test emergenciesList
        //instance.emergenciesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('emergenciesPartialUpdate', function() {
      it('should call emergenciesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test emergenciesPartialUpdate
        //instance.emergenciesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('emergenciesRetrieve', function() {
      it('should call emergenciesRetrieve successfully', function(done) {
        //uncomment below and update the code to test emergenciesRetrieve
        //instance.emergenciesRetrieve(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('emergenciesUpdate', function() {
      it('should call emergenciesUpdate successfully', function(done) {
        //uncomment below and update the code to test emergenciesUpdate
        //instance.emergenciesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mainEmergenciesList', function() {
      it('should call mainEmergenciesList successfully', function(done) {
        //uncomment below and update the code to test mainEmergenciesList
        //instance.mainEmergenciesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mainEmergenciesRetrieve', function() {
      it('should call mainEmergenciesRetrieve successfully', function(done) {
        //uncomment below and update the code to test mainEmergenciesRetrieve
        //instance.mainEmergenciesRetrieve(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
