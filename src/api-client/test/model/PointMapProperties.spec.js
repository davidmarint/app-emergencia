/**
 * ASI API
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AsiApi);
  }
}(this, function(expect, AsiApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AsiApi.PointMapProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PointMapProperties', function() {
    it('should create an instance of PointMapProperties', function() {
      // uncomment below and update the code to test PointMapProperties
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be.a(AsiApi.PointMapProperties);
    });

    it('should have the property pointId (base name: "point_id")', function() {
      // uncomment below and update the code to test the property pointId
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be();
    });

    it('should have the property begin (base name: "begin")', function() {
      // uncomment below and update the code to test the property begin
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be();
    });

    it('should have the property end (base name: "end")', function() {
      // uncomment below and update the code to test the property end
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be();
    });

    it('should have the property altitudeMode (base name: "altitudeMode")', function() {
      // uncomment below and update the code to test the property altitudeMode
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be();
    });

    it('should have the property tessellate (base name: "tessellate")', function() {
      // uncomment below and update the code to test the property tessellate
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be();
    });

    it('should have the property extrude (base name: "extrude")', function() {
      // uncomment below and update the code to test the property extrude
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be();
    });

    it('should have the property drawOrder (base name: "drawOrder")', function() {
      // uncomment below and update the code to test the property drawOrder
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be();
    });

    it('should have the property icon (base name: "icon")', function() {
      // uncomment below and update the code to test the property icon
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be();
    });

    it('should have the property snippet (base name: "snippet")', function() {
      // uncomment below and update the code to test the property snippet
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be();
    });

    it('should have the property tag (base name: "tag")', function() {
      // uncomment below and update the code to test the property tag
      //var instance = new AsiApi.PointMapProperties();
      //expect(instance).to.be();
    });

  });

}));
